<!doctype html> <html class="no-js" lang="en"> <head> <meta charset="utf-8"/> <meta name="viewport" content="width=device-width, initial-scale=1.0"/> <title>Hadoop M/R to implement &#8220;People You Might Know&#8221; friendship recommendation</title> <script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"a9e6cd83196a4073c0154f455c6a5a37",petok:"2751968484d0436551aba247b5391680810283a5-1496957016-1800",zone:"dbtsai.com",rocket:"a",apps:{}}];document.write('<script type="text/javascript" src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=85b614c0f6/cloudflare.min.js"><'+'\/script>');}}catch(e){};
//]]>
</script>
<link rel="stylesheet" href="https://www.dbtsai.com/assets/css/styles_feeling_responsive.css"> <script data-rocketsrc="https://www.dbtsai.com/assets/js/modernizr.min.js" type="text/rocketscript"></script> <script type="text/rocketscript"> WebFontConfig = { google: { families: [ 'Lato:400,700,400italic:latin', 'Volkhov::latin' ] } }; (function() { var wf = document.createElement('script'); wf.src = ('https:' == document.location.protocol ? 'https' : 'http') + '://ajax.googleapis.com/ajax/libs/webfont/1.5.6/webfont.js'; wf.type = 'text/javascript'; wf.async = 'true'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(wf, s); })(); </script> <noscript> <link href='http://fonts.googleapis.com/css?family=Lato:400,700,400italic%7cVolkhov' rel='stylesheet' type='text/css'> </noscript> <meta name="description" content="The weblog of what I&#39;m enthusiastic about, including big data, machine learning, computer science, and open source."/> <link rel="author" href="https://plus.google.com/u/0/102289339250559351302"/> <link rel="icon" sizes="192x192" href="https://www.dbtsai.com/assets/img/touch-icon-192x192.png"> <link rel="apple-touch-icon-precomposed" href="https://www.dbtsai.com/assets/img/apple-touch-icon-precomposed.png"> <meta name="msapplication-TileImage" content="https://www.dbtsai.com/assets/img/msapplication_tileimage.png"/> <meta name="msapplication-TileColor" content="#fabb00">   <meta property="og:locale" content="en_EN"/> <meta property="og:title" content="Hadoop M/R to implement &#8220;People You Might Know&#8221; friendship recommendation"/> <meta property="og:description" content="The weblog of what I&#39;m enthusiastic about, including big data, machine learning, computer science, and open source."/> <meta property="og:url" content="https://www.dbtsai.com//blog/2013/hadoop-mr-to-implement-people-you-might-know-friendship-recommendation/"/> <meta property="og:site_name" content="DB Tsai"/>   <link type="text/plain" rel="author" href="https://www.dbtsai.com/humans.txt"/> </head> <body id="top-of-page" class=""> <div id="navigation" class="sticky"> <nav class="top-bar" data-topbar> <ul class="title-area"> <li class="name"> <h1 class="show-for-small-only"><a href="https://www.dbtsai.com" class="icon-tree"> DB Tsai</a></h1> </li>   <li class="toggle-topbar menu-icon"><a href="#"><span>Navigation</span></a></li> </ul> <section class="top-bar-section"> <ul class="right"> <li class="divider"></li> <li><a href="https://www.dbtsai.com/search/">Search</a></li> </ul> <ul class="left"> <li><a href="https://www.dbtsai.com/">Home</a></li> <li class="divider"></li> <li><a href="https://www.dbtsai.com/publications/">Publications</a></li> <li class="divider"></li> <li><a href="https://www.dbtsai.com/talks/">Talks</a></li> <li class="divider"></li> <li class="has-dropdown"> <a href="https://www.dbtsai.com/blog/">Blog</a> <ul class="dropdown"> <li><a href="https://www.dbtsai.com/blog/">Blog</a></li> <li><a href="https://www.dbtsai.com/blog/archive/">Blog Archive</a></li> </ul> </li> <li class="divider"></li> <li><a href="https://www.dbtsai.com/about/">About</a></li> <li class="divider"></li> </ul> </section> </nav> </div>  <div id="masthead"> <div class="row"> <div class="small-12 columns"> <a id="logo" href="https://www.dbtsai.com" title="DB Tsai – Machine Thinks Big"> <img src="https://www.dbtsai.com/assets/img/logo.png" alt="DB Tsai – Machine Thinks Big"> </a> </div>  </div>  </div>  <nav class="breadcrumbs" role="menubar" aria-label="breadcrumbs"> <li><a href="https://www.dbtsai.com">Start</a></li> <li><a href="https://www.dbtsai.com/blog/">blog</a> <li><a href="https://www.dbtsai.com/blog/2013/">2013</a> <li class="current">Hadoop M/R to implement &#8220;People You Might Know&#8221; friendship recommendation</li> </nav> <div class="row t30"> <div class="medium-8 columns medium-offset-2 end"> <article itemscope itemtype="http://schema.org/Article"> <header> <span itemprop="name"> <h1>Hadoop M/R to implement &#8220;People You Might Know&#8221; friendship recommendation</h1> </span> </header> <span itemprop="articleSection"> <p><a href="https://www.dbtsai.com/assets/blog/2013/01/social.png"><img class="alignleft wp-image-1965" alt="social" src="https://www.dbtsai.com/assets/blog/2013/01/social.png" width="345" height="200"/></a></p> <p>The best friendship recommendations often come from friends. The key idea is that if two people have a lot of mutual friends, but they are not friends, then the system should recommend them to be connected to each other.<br/> Let’s assume that the friendships are undirected: if A is a friend of B then B is also a friend of A. This is the most common friendship system used in Facebook, Google+, Linkedin, and several social networks. It’s not difficult to extend it to directed friendship system used in twitter; however, we’ll focus on the undirected case throughout this post.</p> <p>The context of this article is modified into an exercise by Dr. Matthew for his students, you may want to <a href="http://www.cems.uwe.ac.uk/~pmatthew/blog/2014/03/04/teaching-mapreduce" target="_blank">check it out</a>!<br/>  </p> <p>The input data will contain the adjacency list and has multiple lines in the format of <USER><TAB><FRIENDS>, where <USER> is an unique ID for an unique user, and <FRIENDS> is the list of users separated by comma who are the friends of <USER>. The following is an input example. The relationships between user and user can be understood easier in the graph.</USER></FRIENDS></USER></FRIENDS></TAB></USER></p> <p style="padding-left: 30px;"> 0    1,2,3<br/> 1    0,2,3,4,5<br/> 2    0,1,4<br/> 3    0,1,4<br/> 4    1,2,3<br/> 5    1,6<br/> 6    5 </p> <p>In the graph, you can see user 0 is not friends of user 4, and 5, but user 0 and user 4 have mutual friends 1, 2, and 3; user 0 and user 5 have mutual friend 1. As a result, we would like to recommend user 4 and 5 as friends of user 0.</p> <p>The output recommended friends will be given in the following format. <USER><TAB>&lt;Recommended friend to USER(# of mutual friends: [the id of mutual friend, ...]),&#8230;&gt;. The output result is sorted according to the number of mutual friends, and can be verified from the graph.</TAB></USER></p> <p style="padding-left: 30px;"> 0    4 (3: [3, 1, 2]),5 (1: [1])<br/> 1    6 (1: [5])<br/> 2    3 (3: [1, 4, 0]),5 (1: [1])<br/> 3    2 (3: [4, 0, 1]),5 (1: [1])<br/> 4    0 (3: [2, 3, 1]),5 (1: [1])<br/> 5    0 (1: [1]),2 (1: [1]),3 (1: [1]),4 (1: [1])<br/> 6    1 (1: [5]) </p> <p>Now, let’s fit this problem into single M/R job. User 0 has friends, 1, 2, and 3; as a result, the pair of &lt;1, 2&gt;, &lt;2, 1&gt;, &lt;2, 3&gt;, &lt;3, 2&gt;, &lt;1, 3&gt;, and &lt;3, 1&gt; have mutual friend of user 0. As a result, we can emit &lt;key, value&gt; = &lt;1, r=2; m=0&gt;, &lt;2, r=1; m=0&gt;, &lt;2, r=3; m=0&gt;…, where r means recommended friend, and m means mutual friend. We can aggregate the result in the reduce phase, and calculate how many mutual friends they have between a user and recommended user. However, this approach will cause a problem. What if user A and the recommended user B are already friends? In order to overcome this problem, we can add another attribute   isFriend into the emitted value, and we just don’t recommend the friend if we know they are already friends in the reduce phase. In the following implementation, m = -1 is used when they are already friends instead of using extra field.</p> <p>Define that fromUser is <USER>, and toUser is one of <FRIENDS> in the input data, and then, the algorithm can be given by</FRIENDS></USER></p> <p><strong>Map phase</strong></p> <ol> <li>Emit &lt;fromUser, r=toUser; m=-1&gt; for all toUser. Let’s say there are <em>n</em> toUser; then we’ll emit *n *records for describing that fromUser and toUser are already friends. Note that they are already friends between the emitted key, and r, so we set m as -1.</li> <li>Emit &lt;toUser1, r=toUser2; m=fromUser&gt; for all the possible combination of toUser1, and toUser2 from toUser, and they have mutual friend, fromUser. It will emit <em>n(n – 1)</em> records.</li> <li>Totally, there are <em>n^2</em> emitted records in the map phase, where n is the number of friends <USER> has.</USER></li> </ol> <p><strong>Reduce phase,</strong></p> <ol> <li>Just summing how many mutual friends they have between the key, and r in the value. If any of them has mutual friend -1, we don’t make the recommendation since they are already friends.</li> <li>Sort the result based on the number of mutual friends.</li> </ol> <p>Because the emitted value is not primitive data type in hadoop, we have to customize a new writable type as the following code.</p><pre class="brush: java; title: ; notranslate" title="">static public class FriendCountWritable implements Writable {
    public Long user;
    public Long mutualFriend;

    public FriendCountWritable(Long user, Long mutualFriend) {
        this.user = user;
        this.mutualFriend = mutualFriend;
    }

    public FriendCountWritable() {
        this(-1L, -1L);
    }

    @Override
    public void write(DataOutput out) throws IOException {
        out.writeLong(user);
        out.writeLong(mutualFriend);
    }

    @Override
    public void readFields(DataInput in) throws IOException {
        user = in.readLong();
        mutualFriend = in.readLong();
    }

    @Override
    public String toString() {
        return " toUser: "
                + Long.toString(user) + " mutualFriend: "
                + Long.toString(mutualFriend);
    }
}
</pre><p>The mapper can be implemented by</p><pre class="brush: java; title: ; notranslate" title="">public static class Map extends Mapper&lt;LongWritable, Text, LongWritable, FriendCountWritable&gt; {
    private Text word = new Text();

    @Override
    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
        String line[] = value.toString().split("\t");
        Long fromUser = Long.parseLong(line[0]);
        List toUsers = new ArrayList();

        if (line.length == 2) {
            StringTokenizer tokenizer = new StringTokenizer(line[1], ",");
            while (tokenizer.hasMoreTokens()) {
                Long toUser = Long.parseLong(tokenizer.nextToken());
                toUsers.add(toUser);
                context.write(new LongWritable(fromUser),
                        new FriendCountWritable(toUser, -1L));
            }

            for (int i = 0; i &lt; toUsers.size(); i++) {
                for (int j = i + 1; j &lt; toUsers.size(); j++) {
                    context.write(new LongWritable(toUsers.get(i)),
                            new FriendCountWritable((toUsers.get(j)), fromUser));
                    context.write(new LongWritable(toUsers.get(j)),
                            new FriendCountWritable((toUsers.get(i)), fromUser));
                }
                }
            }
        }
    }
</pre><p>The reducer can be implemented by</p><pre class="brush: java; title: ; notranslate" title="">public static class Reduce extends Reducer&lt;LongWritable, FriendCountWritable, LongWritable, Text&gt; {
    @Override
    public void reduce(LongWritable key, Iterable values, Context context)
            throws IOException, InterruptedException {

        // key is the recommended friend, and value is the list of mutual friends
        final java.util.Map&lt;Long, List&gt; mutualFriends = new HashMap&lt;Long, List&gt;();

        for (FriendCountWritable val : values) {
            final Boolean isAlreadyFriend = (val.mutualFriend == -1);
            final Long toUser = val.user;
            final Long mutualFriend = val.mutualFriend;

            if (mutualFriends.containsKey(toUser)) {
                if (isAlreadyFriend) {
                    mutualFriends.put(toUser, null);
                } else if (mutualFriends.get(toUser) != null) {
                    mutualFriends.get(toUser).add(mutualFriend);
                }
            } else {
                if (!isAlreadyFriend) {
                    mutualFriends.put(toUser, new ArrayList() {
                        {
                            add(mutualFriend);
                        }
                    });
                } else {
                    mutualFriends.put(toUser, null);
                }
            }
        }

        java.util.SortedMap&lt;Long, List&gt; sortedMutualFriends = new TreeMap&lt;Long, List&gt;(new Comparator() {
            @Override
            public int compare(Long key1, Long key2) {
                Integer v1 = mutualFriends.get(key1).size();
                Integer v2 = mutualFriends.get(key2).size();
                if (v1 &gt; v2) {
                    return -1;
                } else if (v1.equals(v2) &amp;&amp; key1 &lt; key2) {
                    return -1;
                } else {
                    return 1;
                }
            }
        });

        for (java.util.Map.Entry&lt;Long, List&gt; entry : mutualFriends.entrySet()) {
            if (entry.getValue() != null) {
                sortedMutualFriends.put(entry.getKey(), entry.getValue());
            }
        }

        Integer i = 0;
        String output = "";
        for (java.util.Map.Entry&lt;Long, List&gt; entry : sortedMutualFriends.entrySet()) {
            if (i == 0) {
                output = entry.getKey().toString() + " (" + entry.getValue().size() + ": " + entry.getValue() + ")";
            } else {
                output += "," + entry.getKey().toString() + " (" + entry.getValue().size() + ": " + entry.getValue() + ")";
            }
            ++i;
        }
        context.write(key, new Text(output));
    }
}
</pre><p>where Comparator is used in TreeMap for sorting the output value in decreasing order of the number of mutual friends.</p> <p>The full working code can be downloaded at <a href="https://www.dbtsai.com/assets/blog/2013/01/FriendRecommendation.java">M/R Friend Recommendation</a> under Apache v2 Licence. I also want to provide a bigger data set from Stanford CS246 class, Mining Massive Data Sets at <a href="https://www.dbtsai.com/assets/blog/2013/01/soc-LiveJournal1Adj.txt">soc-LiveJournal1Adj</a>.</p> </span> <div id="page-meta" class="t30"> <p>     <time class="icon-calendar pr20" datetime="2013-01-22" itemprop="datePublished"> 2013-01-22</time> <span class="icon-archive pr20"> BIG DATA · COMPUTER · HADOOP · PROGRAMING</span> <br> <span class="pr20"><span class="icon-price-tag pr10"> English</span> </span> </p> <div id="post-nav" class="row"> <div class="small-5 columns"><a class="button small radius prev" href="https://www.dbtsai.com/blog/2012/my-startup-dujour-startx/">&laquo; My startup, DuJour in Silicon Valley is now in StartX</a></div>  <div class="small-2 columns text-center"><a class="radius button small" href="https://www.dbtsai.com/blog/archive/" title="Blog Archive">Archive</a></div>  <div class="small-5 columns text-right"><a class="button small radius next" href="https://www.dbtsai.com/blog/2013/java-concurrent-dynamic-object-pool-for-non-thread-safe-objects-using-blocking-queue/">Java Concurrent Dynamic Object Pool for non Thread Safe Objects using Blocking Queue &raquo;</a></div>  </div> </div>  <h3 id="comments" class="t60">Dialogue &amp; Discussion</h3> <div id="disqus_thread"></div> <script type="text/rocketscript"> /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */ var disqus_shortname = 'dbtsai'; var disqus_identifier = '/blog/2013/hadoop-mr-to-implement-people-you-might-know-friendship-recommendation/'; /* * * DON'T EDIT BELOW THIS LINE * * */ (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })(); </script> <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> </article> </div>  </div>  <div id="up-to-top" class="row"> <div class="small-12 columns" style="text-align: right;"> <a class="iconfont" href="#top-of-page">&#xf108;</a> </div>  </div>  <footer id="footer-content" class="bg-grau"> <div id="footer"> <div class="row"> <div class="medium-6 large-5 columns"> <h5 class="shadow-black">About This Site</h5> <p class="shadow-black"> The weblog of what I'm enthusiastic about, including big data, machine learning, computer science, and open source. <a href="https://www.dbtsai.com/about/">More ›</a> </p> <h5 class="shadow-black">Services</h5> <ul class="no-bullet shadow-black"> <li> <a href="https://www.dbtsai.com" title=""></a> </li> <li class="rss-link"> <a href="https://www.dbtsai.com/feed.xml" title="Subscribe to RSS">RSS</a> </li> <li class="sitemap-link"> <a href="https://www.dbtsai.com/sitemap.xml" title="Sitemap for Google Webmastertools">sitemap.xml</a> </li> </ul> </div>  <div class="medium-6 large-5 columns"> <a class="twitter-timeline" href="https://twitter.com/dbtsai" data-widget-id="619691913457696768">Tweets by @dbtsai</a> <script type="text/rocketscript">!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script> </div>  </div>  </div>  <div id="subfooter"> <nav class="row"> <section id="subfooter-left" class="b30 small-12 medium-6 columns"> <ul class="inline-list"> <li><a style="display:inline;" href="https://www.dbtsai.com/">DB Tsai</a> © 2015</li> </ul> </section> <section id="subfooter-right" class="small-12 medium-6 columns social-icons"> <ul class="inline-list"> <li><a href="https://www.youtube.com/dbtsai1" target="_blank" class="icon-youtube" title="Videos, Video-Anleitungen und Filme von Phlow auf YouTube"></a></li> <li><a href="https://twitter.com/dbtsai" target="_blank" class="icon-twitter" title="Immer das Neuste von Phlow gibt es auf Twitter"></a></li> <li><a href="https://github.com/dbtsai" target="_blank" class="icon-github" title="Code und mehr..."></a></li> </ul> </section> </nav> </div>  </footer> <script data-rocketsrc="https://www.dbtsai.com/assets/js/javascript.min.js" type="text/rocketscript"></script> <script type="text/rocketscript"> $("#masthead").backstretch("https://www.dbtsai.com/images/dbtsai-header.jpg", {fade: 700}); $("#masthead-with-text").backstretch("https://www.dbtsai.com/images/dbtsai-header.jpg", {fade: 700}); </script> <script type="text/rocketscript"> (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-37917807-1', 'auto'); ga('set', 'anonymizeIp', true); ga('send', 'pageview'); </script> </body> </html>
