<!doctype html>
<html lang="en">
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link type="application/opensearchdescription+xml" rel="search" href="/opensearch.xml"/>


    <title>Friend Recommendations using MapReduce</title>
    <meta name="description" content="So Jonathan, one of our interns this summer, asked an interesting question today about MapReduce. He said, “Let’s say you download the entire data set of who..."/>
    <link rel="stylesheet" href="/css/site.css" type="text/css" media="all">
    <link href='http://fonts.googleapis.com/css?family=Lato:300,400,600,700' rel='stylesheet' type='text/css'>
    


    <link rel="shortcut icon" href="favicon.ico">
    <link rel="alternate" type="application/rss+xml" title="OpenSource Connections Blog" href="/blog/feed.xml" />

    <link rel="apple-touch-icon" sizes="57x57" href="/favicons/apple-touch-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/favicons/apple-touch-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/favicons/apple-touch-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/favicons/apple-touch-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/favicons/apple-touch-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/favicons/apple-touch-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/favicons/apple-touch-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/favicons/apple-touch-icon-152x152.png">
    <link rel="icon" type="image/png" href="/favicons/favicon-196x196.png" sizes="196x196">
    <link rel="icon" type="image/png" href="/favicons/favicon-160x160.png" sizes="160x160">
    <link rel="icon" type="image/png" href="/favicons/favicon-96x96.png" sizes="96x96">
    <link rel="icon" type="image/png" href="/favicons/favicon-16x16.png" sizes="16x16">
    <link rel="icon" type="image/png" href="/favicons/favicon-32x32.png" sizes="32x32">
    <meta name="msapplication-TileColor" content="#7ec96b">
    <meta name="msapplication-TileImage" content="/favicons/mstile-144x144.png">
    <meta name="msapplication-config" content="/favicons/browserconfig.xml">

    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@">
    
      <meta name="twitter:creator" content="@">
      
    <meta name="twitter:title" content="Friend Recommendations using MapReduce">
    <meta name="twitter:description" content="So Jonathan, one of our interns this summer, asked an interesting question today about MapReduce. He said, “Let’s say you download the entire data set of who...">
    
      <meta name="twitter:image" content="http://opensourceconnections.com/images/logo/OSC-logomark-color.png">
    
    <meta name="twitter:url" content="http://opensourceconnections.com/blog/2013/07/04/friend-recommendations-using-mapreduce/">

    <meta property="og:title" content="Friend Recommendations using MapReduce">
    <meta property="og:type" content="article">
    <meta property="og:url" content="http://opensourceconnections.com/blog/2013/07/04/friend-recommendations-using-mapreduce/">
    
      <meta property="og:image" content="http://opensourceconnections.com/images/logo/OSC-logomark-color.png">
    
    <meta property="og:description" content="So Jonathan, one of our interns this summer, asked an interesting question today about MapReduce. He said, “Let’s say you download the entire data set of who...">
    <meta property="og:site_name" content="OpenSource Connections">
    <meta property="og:locale" content="en_US">

    

    
      <meta property="article:author" content="https://www.facebook.com/">
      <meta property="article:modified_time" content="2013-07-04T00:00:00-04:00">
      <meta property="article:published_time" content="2013-07-04T00:00:00-04:00">
      
        <meta property="og:see_also" content="http://opensourceconnections.com/blog/2017/05/16/debugging-solr-function-queries-splainer/">
      
        <meta property="og:see_also" content="http://opensourceconnections.com/blog/2017/04/29/beSwarm-8/">
      
        <meta property="og:see_also" content="http://opensourceconnections.com/blog/2017/04/29/choosing-proprietary-vs-open-source-search/">
      
    

    
      
      <meta property="article:section" content="blog">
      
    

    
      
    

    

    

  <!-- CSS_ADSBLOCK_START -->
<link rel="stylesheet" href="http://adblockers.opera-mini.net/css_block/default-domainless.css" type="text/css" />
<!-- CSS_ADSBLOCK_END -->
</head>
  <body class=" template-post">
    <div class="page">
      <header id="pageHeader" role="site-banner" class="page-header">
        <div class="container">
          <div id="globalNav" class="nav-global">
            <div class="logomark">
              <img src="/images/logo/OSC-logomark-color.png" alt="">
              <a href="/">
                <h1>OpenSource Connections</h1>
              </a>
            </div>

            <nav>
              <ul class="main-navigation">
                
                  
                  

                  
                  

                  <li class="first  services">
                    <a class="" href="/services/">Services</a>
                  </li>
                
                  
                  

                  
                  

                  <li class=" portfolio">
                    <a class="" href="/case-studies/">Case Studies</a>
                  </li>
                
                  
                  

                  
                  

                  <li class=" about">
                    <a class="" href="/about-us/">About</a>
                  </li>
                
                  
                  

                  
                  

                  <li class=" blog">
                    <a class="" href="/blog/">Blog</a>
                  </li>
                
                  
                  

                  
                  

                  <li class=" last contact">
                    <a class="" href="#contactUs">Contact</a>
                  </li>
                
                <li class="search-element">
                  <form action="/search/" method="get">
                    <input type="search" name="q" id="searchbox" />
                  </form>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </header>







<article id="mainContent" class="post main-content">
  <section class="container">
    <div class="large-12">
      <div class="article-header">
        
          <span class="author-img">
            
              <a href="/about-us/john-berryman"><img class="circular" src="/about-us/team-photos/john-berryman-thumb.jpg" /></a>
            
          </span>
        

        <div class="page-title">
          <h1 class="title">
            
            Friend Recommendations using MapReduce
            
          </h1>
         




<div class="author-meta">

  <a href="/about-us/john-berryman">John Berryman</a> — <span class="date">July 4, 2013</span>


</div>

          <div class="description">
            
          </div>
        </div>
      </div>
      <div class="article-content">
        <p>So Jonathan, one of our interns this summer, asked an interesting question today about MapReduce. He said, “Let’s say you download the entire data set of who’s following who from Twitter. Can you use MapReduce to make recommendations about who any particular individual should follow?” And as Jonathan’s mentor this summer, and as one of the OpenSource Connections MapReduce experts I dutifully said, “uuuhhhhh…”</p>

<p>And then in a stoke of genius … I found a way to stall for time. “Well, young Padawan,” I said to Jonathan, “first you must more precisely define your problem… and only then will the answer be revealed to you.” And then darn it if he didn’t ask me what I meant! Left with no viable alternatives, I squeezed my brain real hard, and this is what came out:</p>

<h1 id="how-to-make-follow-recommendations-on-twitter">How to make “follow” recommendations on Twitter</h1>

<p>In my mind, the more precise definition of the problem goes something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>If Jonathan is following Frank, Fred, Frida, and Fernando,
  and if Frank, Fred, Frida, and Fernando are all following Zeke,
    and if Jonathan is **not** currently following Zeke
      **then Jonathan should follow Zeke.**
</code></pre>
</div>

<p>Or a bit more generally, “if a lot of my friends are following someone who I am not yet following, then I might be interested in following that person”.</p>

<p>Now, given my only somewhat more precise statement of the problem, let’s look at the inputs and outputs to the problems. Let’s say that capital letters stand for people on Twitter. The information that we download from Twitter can be formatted to look something like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>A -follows-&gt; [B C D M P Q X Y Z]
B -follows-&gt; [A C D F P Q X Y Z]
C -follows-&gt; [A B D F G M X Y]
D -follows-&gt; [A B C F G M Q]
...
</code></pre>
</div>

<p>The ultimate output might then be an ordered list of who each person should follow</p>

<div class="highlighter-rouge"><pre class="highlight"><code>A -should-follow-&gt; [F G]
B -should-follow-&gt; [M]
C -should-follow-&gt; [Q P]
D -should-follow-&gt; [X Y Z]
...
</code></pre>
</div>

<p>And the big question is how do we generate this list? Now I was unfortunately too slow to answer this question on the spot. However after staring at the ceiling for several hours, the answer came to me in a flash of insight:</p>

<p>We can do this with MapReduce, but we’re going to need to spread it out into two iterations.</p>

<ul>
  <li>Iteration 1: Find friends of friends.</li>
  <li>Iteration 2: Count and sort the friends of frieds on a per person basis, and find friends of friends that aren’t already being followed by said person.</li>
</ul>

<h1 id="friend-recommendations-in-pseudocode">Friend recommendations in pseudocode:</h1>

<p>To reiterate, before the we run the map reduce, we have the following input rows</p>

<div class="highlighter-rouge"><pre class="highlight"><code>people       listOfWhoTheyFollow
A            [B C D M P Q X Y Z]
B            [A C D F P Q X Y Z]
C            [A B D F G M X Y]
D            [A B C F G M Q]
...
</code></pre>
</div>

<h2 id="iteration-1-find-friends-of-friends-mapper">Iteration 1: Find Friends of Friends: Mapper</h2>

<div class="highlighter-rouge"><pre class="highlight"><code>map(person,listOfWhoTheyFollow) :
  emit [person, 'follows'] -&gt; listOfWhoTheyFollow
  for(friend in listOfWhoTheyFollow) :
      emit [friend, 'followed_by'] -&gt; person
</code></pre>
</div>

<p>This mapper will emit things that look like this:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>    [A, 'follows'] -&gt; [B C D M P Q X Y Z]
    [B, 'followed_by'] -&gt; A
    [C, 'followed_by'] -&gt; A
    [D, 'followed_by'] -&gt; A
    ...
    [B, 'follows'] -&gt; [A C D F P Q X Y Z]
    [A, 'followed_by'] -&gt; B
    [C, 'followed_by'] -&gt; B
    [D, 'followed_by'] -&gt; B
    ...
</code></pre>
</div>

<p>Here, the key’s are compound, containing a person and then their relationship to the people mentioned in the values. Why would I want to do this? Because I’m getting ready to take advantage of some less commonly used feature of MapReduce – custom partitioning, custom grouping, and custom sorting. Here’s how it will work:</p>

<h2 id="iteration-1-find-friends-of-friends-shuffle-sort">Iteration 1: Find Friends of Friends: Shuffle Sort</h2>

<ul>
  <li>Define a custom partitioner that partitions on the first element of the mapper outputs keys. This will ensure that <code class="highlighter-rouge">[A, 'follows'] -&gt; [B C D M P Q X Y Z]</code> goes to the same machine as <code class="highlighter-rouge">[A, 'followed_by'] -&gt; D</code>.</li>
  <li>Define a custom sort that sorts on person first and on the relationship second. Make sure that ‘followed_by’ comes after ‘follows’. Now <code class="highlighter-rouge">[A, 'follows'] -&gt; [B C D M P Q X Y Z]</code> goes to the same machine and comes before <code class="highlighter-rouge">[A, 'followed_by'] -&gt; D</code>.</li>
  <li>Define a custom grouping so that all keys with the same person go to the same reducer. In this case <code class="highlighter-rouge">[A, 'follows'] -&gt; [B C D M P Q X Y Z]</code> goes to the same <strong><em>reducer</em></strong> as <code class="highlighter-rouge">[A, 'followed_by'] -&gt; D</code>. This seems like just the same thing as the custom partitioner, but if we hadn’t taken this extra step, these two key value pairs would have gone to different reducers on the same machine.</li>
</ul>

<p>(For more details about custom partitioning, sorting, and grouping, see the Secondary Sorting section of Chapter 8 of Tom White’s <em>Hadoop: The Definitive Guide</em>. Alternatively, look at our post: <a href="/2013/02/12/future-post/?custom-partitioning-sorting-grouping-in-mapreduce">Custom Partitioning, Sorting, and Grouping in Hadoop MapReduce</a>.) After the shuffle and sort, then a single reducer will get all the key values associated with a person sorted so that the “follows” relationship comes first. For instance, for <code class="highlighter-rouge">A</code> the reducer will receive these inputs:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>[A, 'follows'] -&gt; [B C D M P Q X Y Z]
[A, 'followed_by'] -&gt; [B C D ... ]
</code></pre>
</div>

<p>And for <code class="highlighter-rouge">B</code> the reducer will receive these inputs:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>[B, 'follows'] -&gt; [A C D F P Q X Y Z]
[B, 'followed_by'] -&gt; [A C D ... ]
</code></pre>
</div>

<h2 id="iteration-1-find-friends-of-friends-reducer">Iteration 1: Find Friends of Friends: Reducer</h2>

<p>For each person, the associated reducer will be called twice. The first time with the “follows” list and the second time with the “followed_by” list. The goal of the reducer is to convert this information to a list of friends of friends.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>listOfWhoTheyFollow = null

reduce(compoundKey,people) :
    if(compoundKey[1] = 'follows') :
        listOfWhoTheyFollow = people
        # and do nothing else because the next call to the
        # reducer will have the corresponding 'followed_by' list
    else if(compoundKey[1] = 'followed_by') :
        listOfPeopleThatFollowThem = people
        for(followed in listOfWhoTheyFollow) :
            for(follower in listOfPeopleThatFollowThem) :
                emit follower -&gt; followed
</code></pre>
</div>

<p>As seen here, whenever the reducer is first called it sets aside the list of people that this person follows. On the subsequent call to this reducer, the reducer iterates through all of the people that follows this person and all of the people that this person follows, and for each pair, the <code class="highlighter-rouge">follower -&gt; followed</code> key,value is emitted.</p>

<p>Effectively we are iterating through all possible friends of friends that exist in Twitter. Considering that there are roughly 500M Twitterers and the average number of followers (and followees?) is 200, and considering that the id of users are probably stored as longs, then the result of this iteration is roughly 730TB of stored data. Is this a problem (well maybe!) of course not! This is Big Data! (…whimper…)</p>

<h1 id="half-way-there">Half way there.</h1>

<p>This post is getting long, so I’ll truncate it here for the time being. In the next iteration of this algorithm, we’ll count up all of the friend-of-friend relationship, weed out the ones that they’re already following, and present the users with the best people to follow – namely, those friends of friends who are <em>most</em> popular among friends.</p>

<p>Interested in seeing the rest of the algorithm? Comment below!</p>

<hr />

<p>Check out my <a href="http://www.linkedin.com/pub/john-berryman/13/b17/864">LinkedIn</a> Follow me on <a href="http://twitter.com/#!/jnbrymn">Twitter</a></p>

<!--</p>
<p>##Iteration 2: Count and Recommend Friends of Friends: Mapper</p>
<p>In this iteration, the mapper is pretty wimpy... it just passes everything through to the reducer. But it's important to consider what we are passing through here! Every key value pair will be in the form of `person1 -> person2` where the first person is any particular user and the second person is a "friend of a friend" of the first person - or more to the point, `person2` is someone that `person1` might consider following because `person1` follows *someone* that follows `person2`. And as a matter of fact `person1` may even follow *several people* that follow `person2` - indicating that `person1` is really missing out if he's not already following `person2`!</p>
<p>At the end of the mapper phase, the shuffle sort consumes key value pairs that look like this:</p>
<p>    A->B,   A->B,<br />
    A->C,   A->C,<br />
    A->D,   A->D,<br />
    A->F,   A->F,   A->F,<br />
    A->G,   A->G,<br />
    A->M,   A->M,<br />
    A->P,<br />
    A->Q,   A->Q,<br />
    A->X,   A->X,<br />
    A->Y,   A->Y,<br />
    A->Z<br />
    B->A,   B->A,<br />
    B->B,<br />
    B->C,   B->C,<br />
    B->D,   B->D,<br />
    B->F,   B->F,<br />
    B->G,   B->G,<br />
    B->M,   B->M,   B->M,<br />
    B->P,<br />
    B->Q,   B->Q,<br />
    B->X,   B->X,<br />
    B->Y,   B->Y,<br />
    B->Z<br />
    ...</p>
<p>And convert all to this input to the reducer:</p>
<p>    A [B B C C D D F F F G G M M P Q Q X X Y Y Z] B &#8211;> [A A C C D D F F G G M M M P Q Q X X Y Y Z] &#8230;-->

<p>Improvements:</p>

<ul>
  <li>First reducer or second mapper to eliminate friends of friends who are already being followed which will be plentiful.</li>
  <li>When FoF relationships are redundant – just output them once, with a count. Combiner.</li>
</ul>


      </div>

      


<br><br><hr>




  <div class="latest-posts">

    
    <h2>More blog articles: </h2>
    

    <div class="posts flex-container box-gutters ">
      
      
        <div class="post_info box">
          <a href="/blog/2017/05/16/debugging-solr-function-queries-splainer/">Using Splainer to Debug Complex Solr Function Queries</a>
          <small>(16 May 2017)</small>
          <p>
            <small>Solr function queries look like Excel queries from hell. I want to tell you how I debug complex Solr function...</small>
          </p>
        </div>
      
      
      
        <div class="post_info box">
          <a href="/blog/2017/04/29/choosing-proprietary-vs-open-source-search/">When to choose open source search (and when you shouldn't)</a>
          <small>(29 Apr 2017)</small>
          <p>
            <small>In this article, I want to single out Solr and Elasticsearch specifically for consideration. Why? As open source solutions, they...</small>
          </p>
        </div>
      
      
      
        <div class="post_info box">
          <a href="/blog/2017/04/03/test-drive-elasticsearch-learn-to-rank-linear-model/">Test Driving Elasticsearch Learning to Rank with a Linear Model</a>
          <small>(03 Apr 2017)</small>
          <p>
            <small>This blog post let's the simple model we derived in a previous post and make it usable via the Elasticsearch...</small>
          </p>
        </div>
      
      
    </div>
  </div>




            
        <hr>
        
        
            <section class="news-rotator">
<div class="large-8">
    <h2>We've been Solr-istas since day one!</h2>

    <p class="caption">Our founder wrote the first book on Solr, now in 3rd edition. We've helped organizations from the US Patent and Trademark Office to Cisco build smarter search solutions with Solr.</p>
    <p><a href="/services/solr">Learn More</a> about our Solr services.</p>
</div>
<a href="/services/solr"><img src="/images/solr-book.png" alt="" width="175px" class="image pull-right"></a>
</section>

        

      
      
    
    </div>
  </section>
</article>

    <hr>

    <div class="container">
      <p class="lead centered">
        The latest in search news, delivered to straight to your inbox.
      </p>
      <form class="newsletter-signup">
        <input type=text placeholder="Sign up for our mailing list">
        <input type=submit value="Sign Up">
      </form>
    </div>

    <footer class="site-footer" id="siteFooter">
      <div class="container">
        <div class="contact-form flex-container">
          <div class="box">
            <strong>Company</strong>
            <ul class="footer-links">
              <li><a href="/blog">Blog</a> | <a href="/events">Events</a>  | <a href="/podcast">Podcast</a></li>
              <li><a href="/services">Services</a></li>
              <li><a href="/case-studies">Case Studies</a></li>
              <li><a href="/about-us">About Us</a></li>
            </ul>
          </div>

          <div class="box">
            <strong>Products</strong>
            <ul class="footer-links">
              <li><a href="https://quepid.com">Quepid</small></a></li>
              <!-- <li><a href="#">Grand Central</small></a></li> -->
            </ul>

            <strong>Publications</strong>
            <ul class="footer-links">
              <li><a href="/blog/2015/04/09/osc-is-taming-search/">Relevant Search</a></a></li>
              <li><a href="https://www.packtpub.com/big-data-and-business-intelligence/building-search-server-elasticsearch-video">Elasticsearch course</a></li>
              <li><a href="https://www.packtpub.com/big-data-and-business-intelligence/apache-solr-enterprise-search-server-third-edition">Solr Enterprise Server</a></li>
            </ul>
          </div>

          <div id="contactUs" class="box middle">
            <strong>GET IN TOUCH</strong>
            <p>
              We'd love to hear from you!
            </p>
            <ul class="footer-links">
              <li><a onclick="goog_report_conversion('tel:434-466-1467')" href="tel:434-466-1467">(434) 466-1467</a></li>
              <li><a onclick="hello_report_conversion()" href="mailto:hello@o19s.com">hello@o19s.com</a></li>
              <li><a href="http://twitter.com/o19s">@o19s</a></li>
            </ul>
          </div>
          <a name="contact"></a>
          <div class="osc_captcha">
            <script type="text/javascript" src="https://opensourceconnections.formstack.com/forms/js.php/osc_contact_us"></script>
            <noscript><a href="https://opensourceconnections.formstack.com/forms/osc_contact_us" title="Online Form">Online Form - OSC – Contact Us</a></noscript>
          </div>
        </div>

        <p class="muted">&copy; 2016 OpenSource Connections, LLC</p>
      </div>
    </footer>

    <script src="/js/libs/audiojs/audio.min.js"></script>
    <script>
      audiojs.events.ready(function() {
        var as = audiojs.createAll();
      });
    </script>
    <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-180020-1']);
      _gaq.push(['_setSiteSpeedSampleRate', 50]);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>

 
    <!-- Google Code for Formstack Submission Conversion Page -->
    <script type="text/javascript">
    /* <![CDATA[ */
    goog_snippet_vars = function() {
	    var w = window;
      w.google_conversion_id = 939756441;
      w.google_conversion_language = "en";
      w.google_conversion_format = "3";
      w.google_conversion_color = "ffffff";
      w.google_conversion_label = "lUMgCNuTz3AQmZeOwAM";
      w.google_remarketing_only = false;
    }
    // DO NOT CHANGE THE CODE BELOW.
    goog_report_conversion = function(url) {
      goog_snippet_vars();
      console.log("Thanks for contacting us!");
      window.google_conversion_format = "3";
      var opt = new Object();
      opt.onload_callback = function() {
        if (typeof(url) != 'undefined') {
          window.location = url;
        }
      }
      var conv_handler = window['google_trackConversion'];
      if (typeof(conv_handler) == 'function') {
        conv_handler(opt);
        }
      }


      // Hello conversion
    hello_vars = function() {
	    var w = window;
      w.google_conversion_id = 939756441;
      w.google_conversion_language = "en";
      w.google_conversion_format = "3";
      w.google_conversion_color = "ffffff";
      w.google_conversion_label = "NKE6CKKn9HAQmZeOwAM";
      w.google_remarketing_only = false;
    }
    // DO NOT CHANGE THE CODE BELOW. <-- Doug says f*ck you! I'm changing your stinking code!!
    hello_report_conversion = function(url) {
      hello_vars();
      console.log("Thanks for emailing hello@o19s.com!");
      window.google_conversion_format = "3";
      var opt = new Object();
      opt.onload_callback = function() {
        if (typeof(url) != 'undefined') {
          window.location = url;
        }
      }
      var conv_handler = window['google_trackConversion'];
      if (typeof(conv_handler) == 'function') {
        conv_handler(opt);
        }
      }
	/* ]]> */
	</script>
	<script type="text/javascript"
	src="//www.googleadservices.com/pagead/conversion_async.js">
	</script>
    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script src="/js/libs/url.min.js"></script>
    <script src="/js/track.js"></script> 
    <!-- <script src="/js/site.js"></script> -->

    
  </body>
</html>

